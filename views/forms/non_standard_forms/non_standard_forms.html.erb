<!-- 
  Form with non-model 
  - controller
    - on first action - set new Model Impersonator 
      @contact_us = ModelImplersonator.new
    - on create / update action - set value and error message on invalid flow 
      @contact_us.set_value(:subject,  'Hello')
      @contact_us.add_error_message(:subject, 'Please change subject')
  - on view: 
    - set value and inline errors locals)
      value: @contact_us.values[:subject]
      locals: { errors_hash: @contact_us.error_messages, attribute: :subject, ian: false }
-->
<%= form_with(scope: 'contact_us', url: contact_us_path, method: :post) do |contact_us_form| %>
  <%= contact_us_form.text_field(:subject, value: @contact_us.values[:subject], class: 'form-control') %>
  <%= render('shared/inline_errors', errors: @contact_us.errors.messages[:subject]) %>
<% end %>


<!--
  Form with fields for unrelated models or non-models
  - fields_for for each model with some_sub_scope
  - have separate strong_params method for each model with have double require 
  - params.require('some_scope').require('some_sub_scope').permit(...)
  - see conrollers/strong_params for details
-->
<%= form_with(scope: 'application', url: application_path, method: :post) do |application_form| %>
  <%= application_form.fields_for(:applicant) do |applicant_form| %>
    <%= applicant_form.text_field(:name, value: @applicant.name, class: 'form-control') %>
  <% end %>
  <%= application_form.fields_for('message') do |message_form| %>
    <%= message_form.text_field(:subject, value: @message[:subject], class: 'form-control') %>
  <% end %>
<% end %>



<!--
  Form with nested fields for single child
  - set up model
    - create has_one relationship: has_one :home
    - add: accepts_nested_attributes_for :home, update_only: true, allow_destroy: true
    - see https://api.rubyonrails.org/v6.1.0/classes/ActiveRecord/NestedAttributes/ClassMethods.html for details
  - set up view
    - add fields_for(:user_attributes)
  - strong params
    - params.require('user').permit(home_attributes: [:color])
    - see conrollers/strong_params for details
-->

<%= form_with(scope: 'user', url: users_path, method: :post) do |user_form| %>             
  <%= users_form.text_field(:name, value: user.name, class: 'form-control') %>
  <%= users_form.fields_for(:home_attributes) do |home_attributes_form| %>
    <%= home_attributes_form.text_field(:color, value: user.home.try(:color), class: 'form-control') %>
  <% end %>
<% end %>
<!--
  Form with nested fields for multiple children (note use of plural as opposed to above)
  - set up model
    - create has_one relationship: has_many :friends
    - add: accepts_nested_attributes_for :home, update_only: true, allow_destroy: true
    - see https://api.rubyonrails.org/v6.1.0/classes/ActiveRecord/NestedAttributes/ClassMethods.html for details
  - set up view
    - add fields_for(:friends_attributes)
    - set up inputs with same options for array forms (see above for simple array and array of hashes)
  - strong params
    - params.require('user').permit(friends_attributes: [:name, :is_cool])
    - see conrollers/strong_params for details
-->
<%= form_with(scope: 'user', url: user_path(1), method: :patch) do |user_form| %>             
  <%= users_form.text_field(:name, value: user.name, class: 'form-control') %>
  <% user.friends.each do |friend| %>
    <%= users_form.fields_for(:friends_attributes) do |freinds_attributes_form| %>
      <%= freinds_attributes_form.label(:name, 'Friend name', for: "friend_#{friend.id}_name") %>
      <%= freinds_attributes_form.text_field(nil, value: freind.name, id: "friend_#{index + 1}_name", class: 'form-control') %>
      <div class="custom-control custom-checkbox">
        <%= check_box_tag(freinds_attributes_form.object_name + '[]', id: "friend_#{index + 1}_is_cool", class: 'custom-control-input') %>
        <%= freinds_attributes_form.label(:is_cool, 'Is cool?', for: "friend_#{index + 1}_is_cool", class: "custom-control-label text-wrap") %>
      </div>
    <% end %>
  <% end %>
<% end %>

<!--
  [Any combination of multiple of the above]
  - [use stuff above]
-->

<!--
  If using same form for new & edit
-->
<% if model.new_record? %>
  <% url = some_named_path %>
  <%# REVIEW: update url %>
  <% id_or_new = "new" %>
<% else %>
  <% url = some_named_path %>
  <%# REVIEW: update url %>
  <% id_or_new = model.id %>
<% end %>
<%= form_with(model: model, url: url) do |f| %>
<%# REVIEW: make sure you didn't replace the model key above with the actual name of the model %>


