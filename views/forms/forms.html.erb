<!-- 
  - All forms below are shown with a text field as an example that is meant
    to be illuscrative of all possible inputs
  - Array forms will also have Checkboxes because checkboxes can be tricky with 
    arrays (rails inserts hidden field with value of 0)
  - Array forms will also have labels because labels will need manual "for:" 
    option to be set (because in array forms, we manually set HTML ids as well)
  - Examples do not include form groups or form rows or any other groupings 
    that you would normally add to forms (examples of these wrappers can be 
    found in the views/forms folder)
-->

<!-- 
  Basic form
  - for_with uses scope, url and method
  - fields explicitly have the value
-->
<%= form_with(scope: 'user', url: user_path(@user), method: :patch) do |user_form| %>
  <%= user_form.text_field(:name, value: @user.name, class: 'form-control') %>
<% end %>

<!-- 
  Form with non-model 
  - value comes from simple hash instead of model
-->
<%= form_with(scope: 'contact_us', url: contact_us_path, method: :post) do |contact_us_form| %>
  <%= contact_us_form.text_field(:subject, value: @contact_us[:subject], class: 'form-control') %>
<% end %>

<!--
  Form with fields for unrelated models or non-models
  - fields_for for each model with some_sub_scope
  - have separate strong_params method for each model with have double require 
  - params.require('some_scope').require('some_sub_scope').permit(...)
  - see conrollers/strong_params for details
-->
<%= form_with(scope: 'application', url: application_path, method: :post) do |application_form| %>
  <%= application_form.fields_for(:applicant) do |applicant_form| %>
    <%= applicant_form.text_field(:name, value: @applicant.name, class: 'form-control') %>
  <% end %>
  <%= application_form.fields_for('message') do |message_form| %>
    <%= message_form.text_field(:subject, value: @message[:subject], class: 'form-control') %>
  <% end %>
<% end %>

<!-- 
  Form with simple array
  - goal for name on each input: users[ids][]
  - include fields for (alternatively, you could make form_with have nested value
    "users[ids]" but this only works if there are no other inputs
    on the form other than the array inputs)
  - for non-checkboxes
    - manually give an id (the autogenerated id by rails will not be unique)
    - manually set the label "for:" option to match the manually given name
    - give the method (the first attribute) a value of nil (this will create "[]" in the name
      which is ecactly what we want
  - for checkboxes
    - manually give an id (the autogenerated id by rails will not be unique)
    - manually set the label "for:" option to match the manually given name
    - use check_box_tag, NOT sub_form.check_box (sub_form.check_box inserts an additional hidden
      input with same name and will cause array to collect it - which is not what we want)
    - make the name (the first attribute) "sub_form.objet_name + '[]'" - this will create "[]"
      in the name which is exactly what we want
  - strong params: 
      params.require('users').permit(ids: [])[:ids]
      see conrollers/strong_params for details

-->
<!-- if collecting ids -->
<%= form_with(scope: 'allowed_users', url: allowed_users_path, method: :patch) do |allowed_users_form| %>
  <%= allowed_users_form.fields_for('ids') do |ids_form| %>
    <% users.each do |user| %>
      <div class="custom-control custom-checkbox">
        <%= check_box_tag(ids_form.object_name + '[]', id: "user_#{user.id}_check_box", class: 'custom-control-input') %>
        <%= ids_form.label(:id, user.name, for: "user_#{user.id}_check_box", class: "custom-control-label text-wrap") %>
      </div>
    <% end %>
  <% end %>
<% end %>

<!-- if collecting names -->
<%= form_with(scope: 'allowed_users', url: allowed_users_path, method: :patch) do |allowed_users_form| %>
  <%= allowed_users_form.fields_for('names') do |names_form| %>
    <% users.each do |user| %>
      <%= names_form.label(:name, 'User name', for: "user_#{user.id}_name") %>
      <%= names_form.text_field(nil, value: user.name, id: "user_#{user.id}_name", class: 'form-control') %>
    <% end %>
  <% end %>
<% end %>

<!-- 
  Form with array of hashes
  - goal for name on each input: users[users_list][][favorite_color]
  - include fields for (alternatively, you could make form_with have nested value
    "users[users_list]" but this only works if there are no other inputs
    on the form other than the array inputs
  - for non-checkboxes
    - manually give an id (the autogenerated id by rails will not be unique)
    - manually set the label "for:" option to match the manually given name
    - add the "name:" like this: "name: sub_form.object_name + '[]favorite_color'" 
      this will create "[]" before the name which is ecactly what we want
  - for checkboxes
    - manually give an id (the autogenerated id by rails will not be unique)
    - manually set the label "for:" option to match the manually given name
    - use check_box_tag, NOT sub_form.check_box (sub_form.check_box inserts an additional hidden
      input with same name and will cause array to collect it - which is not what we want)
    - make the name (the first attribute) "sub_form.objet_name + '[]is_admin'" - this 
      will create "[]" in the name which is exactly what we want
    - strong params: 
      params.require('users').permit(users_list: [:favorite_color, :is_admin])[:users_list]
      see conrollers/strong_params for details
-->
<%= form_with(scope: 'users', url: users_bulk_changes_path, method: :patch) do |users_form| %>
  <%= form.fields_for('users_list') do |users_list_form| %>
    <%= users_list_form.label(:favorite_color, 'User favorite color', for: "user_#{user.id}_favorite_color") %>
    <%= users_list_form.text_field(:favorite_color, name: users_list_form.object_name + '[]favorite_color', value: user.favorite_color, id: "user_#{user.id}_favorite_color", class: 'form-control') %>
    <div class="custom-control custom-checkbox">
      <%= check_box_tag(users_list_form.object_name + '[]is_admin', for: "user_#{user.id}_is_admin", class: 'custom-control-input') %>
      <%= users_list_form.label(:is_admin, 'Make admin?', for: "user_#{user.id}_is_admin", class: "custom-control-label text-wrap") %>
    </div>
  <% end %>
<% end %>

<!--
  Form with nested fields for single child
  - set up model
    - create has_one relationship: has_one :home
    - add: accepts_nested_attributes_for :home, update_only: true, allow_destroy: true
    - see https://api.rubyonrails.org/v6.1.0/classes/ActiveRecord/NestedAttributes/ClassMethods.html for details
  - set up view
    - add fields_for(:user_attributes)
  - strong params
    - params.require('user').permit(home_attributes: [:color])
    - see conrollers/strong_params for details
-->

<%= form_with(scope: 'user', url: users_path, method: :post) do |user_form| %>             
  <%= users_form.text_field(:name, value: user.name, class: 'form-control') %>
  <%= users_form.fields_for(:home_attributes) do |home_attributes_form| %>
    <%= home_attributes_form.text_field(:color, value: user.home.try(:color), class: 'form-control') %>
  <% end %>
<% end %>
<!--
  Form with nested fields for multiple children (note use of plural as opposed to above)
  - set up model
    - create has_one relationship: has_many :friends
    - add: accepts_nested_attributes_for :home, update_only: true, allow_destroy: true
    - see https://api.rubyonrails.org/v6.1.0/classes/ActiveRecord/NestedAttributes/ClassMethods.html for details
  - set up view
    - add fields_for(:friends_attributes)
    - set up inputs with same options for array forms (see above for simple array and array of hashes)
  - strong params
    - params.require('user').permit(friends_attributes: [:name, :is_cool])
    - see conrollers/strong_params for details
-->
<%= form_with(scope: 'user', url: user_path(1), method: :patch) do |user_form| %>             
  <%= users_form.text_field(:name, value: user.name, class: 'form-control') %>
  <%= users_form.fields_for(:friends_attributes) do |freinds_attributes_form| %>
    <% user.friends.each do |friend| %>
      <%= freinds_attributes_form.label(:name, 'Friend name', for: "friend_#{friend.id}_name") %>
      <%= freinds_attributes_form.text_field(nil, value: freind.name, id: "friend_#{index + 1}_name", class: 'form-control') %>
      <div class="custom-control custom-checkbox">
        <%= check_box_tag(freinds_attributes_form.object_name + '[]', id: "friend_#{index + 1}_is_cool", class: 'custom-control-input') %>
        <%= freinds_attributes_form.label(:is_cool, 'Is cool?', for: "friend_#{index + 1}_is_cool", class: "custom-control-label text-wrap") %>
      </div>
    <% end %>
  <% end %>
<% end %>

<!--
  [Any combination of multiple of the above]
  - [use stuff above]
-->

<!--
  If using same form for new & edit
-->
<% if model.new_record? %>
  <% url = some_named_path %>
  <%# REVIEW: update url %>
  <% id_or_new = "new" %>
<% else %>
  <% url = some_named_path %>
  <%# REVIEW: update url %>
  <% id_or_new = model.id %>
<% end %>
<%= form_with(model: model, url: url) do |f| %>
<%# REVIEW: make sure you didn't replace the model key above with the actual name of the model %>


